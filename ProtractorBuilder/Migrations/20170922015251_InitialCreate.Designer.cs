// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using ProtractorBuilder.Protractor.Common;
using ProtractorBuilder.Protractor.DbContext;
using System;

namespace ProtractorBuilder.Migrations
{
    [DbContext(typeof(TestContext))]
    [Migration("20170922015251_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestCase", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<string>("Log");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int>("TestCaseType");

                    b.Property<string>("TestSuiteId");

                    b.HasKey("Id");

                    b.HasIndex("TestSuiteId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestCaseStep", b =>
                {
                    b.Property<string>("TestCaseId");

                    b.Property<string>("TestStepId");

                    b.HasKey("TestCaseId", "TestStepId");

                    b.HasIndex("TestStepId");

                    b.ToTable("CasesSteps");
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestModule", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestModuleSuite", b =>
                {
                    b.Property<string>("TestModuleId");

                    b.Property<string>("TestSuiteId");

                    b.HasKey("TestModuleId", "TestSuiteId");

                    b.HasIndex("TestSuiteId");

                    b.ToTable("ModulesSuites");
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestStep", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActionSequence");

                    b.Property<string>("CurrentFailedElement");

                    b.Property<string>("LastSuccessfulElement");

                    b.Property<int>("Locator");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("ResultFromId");

                    b.Property<string>("TestCaseId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ResultFromId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("Steps");
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestSuite", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Enabled");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("TestModuleId");

                    b.HasKey("Id");

                    b.HasIndex("TestModuleId");

                    b.ToTable("Suites");
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestSuiteCase", b =>
                {
                    b.Property<string>("TestSuiteId");

                    b.Property<string>("TestCaseId");

                    b.HasKey("TestSuiteId", "TestCaseId");

                    b.HasIndex("TestCaseId");

                    b.ToTable("SuitesCases");
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestCase", b =>
                {
                    b.HasOne("ProtractorBuilder.Protractor.Common.TestSuite")
                        .WithMany("Cases")
                        .HasForeignKey("TestSuiteId");
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestCaseStep", b =>
                {
                    b.HasOne("ProtractorBuilder.Protractor.Common.TestCase", "TestCase")
                        .WithMany()
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProtractorBuilder.Protractor.Common.TestStep", "TestStep")
                        .WithMany()
                        .HasForeignKey("TestStepId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestModuleSuite", b =>
                {
                    b.HasOne("ProtractorBuilder.Protractor.Common.TestModule", "TestModule")
                        .WithMany()
                        .HasForeignKey("TestModuleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProtractorBuilder.Protractor.Common.TestSuite", "TestSuite")
                        .WithMany()
                        .HasForeignKey("TestSuiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestStep", b =>
                {
                    b.HasOne("ProtractorBuilder.Protractor.Common.TestStep", "ResultFrom")
                        .WithMany()
                        .HasForeignKey("ResultFromId");

                    b.HasOne("ProtractorBuilder.Protractor.Common.TestCase")
                        .WithMany("Steps")
                        .HasForeignKey("TestCaseId");
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestSuite", b =>
                {
                    b.HasOne("ProtractorBuilder.Protractor.Common.TestModule")
                        .WithMany("Suites")
                        .HasForeignKey("TestModuleId");
                });

            modelBuilder.Entity("ProtractorBuilder.Protractor.Common.TestSuiteCase", b =>
                {
                    b.HasOne("ProtractorBuilder.Protractor.Common.TestCase", "TestCase")
                        .WithMany()
                        .HasForeignKey("TestCaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ProtractorBuilder.Protractor.Common.TestSuite", "TestSuite")
                        .WithMany()
                        .HasForeignKey("TestSuiteId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
